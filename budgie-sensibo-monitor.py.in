#!/usr/bin/env python3

import requests
import threading
import time
import json
import gi.repository

gi.require_version('Budgie', '1.0')
gi.require_version('Gtk', '3.0')
from gi.repository import Budgie, GObject, Gtk, Gio, GLib


SERVER = 'https://home.sensibo.com/api/v2'


class SensiboClientAPI:
    def __init__(self, api_key):
        self._api_key = api_key

    def _get(self, path, **params):
        params['apiKey'] = self._api_key
        response = requests.get(SERVER + path, params=params)
        response.raise_for_status()
        return response.json()

    def _patch(self, path, data, **params):
        params['apiKey'] = self._api_key
        response = requests.patch(SERVER + path, params=params, data=data)
        response.raise_for_status()
        return response.json()

    def devices(self):
        result = self._get("/users/me/pods", fields="id,room")
        return {x['room']['name']: x['id'] for x in result['result']}

    def pod_measurement(self, podUid):
        result = self._get("/pods/%s/measurements" % podUid)
        return result['result']

    def pod_ac_state(self, podUid):
        result = self._get("/pods/%s/acStates" %
                           podUid, limit=1, fields="status,reason,acState")
        return result['result'][0]['acState']

    def pod_change_ac_state(self, podUid, currentAcState, propertyToChange, newValue):
        self._patch("/pods/%s/acStates/%s" % (podUid, propertyToChange),
                    json.dumps({'currentAcState': currentAcState, 'newValue': newValue}))


class BudgieSensiboMonitor(GObject.GObject, Budgie.Plugin):
    """ This is simply an entry point into your Budgie Applet implementation.
        Note you must always override Object, and implement Plugin.
    """

    # Good manners, make sure we have unique name in GObject type system
    __gtype_name__ = "budgie-sensibo-monitor"

    def __init__(self):
        """ Initialisation is important.
        """
        GObject.Object.__init__(self)

    def do_get_panel_widget(self, uuid):
        """ This is where the real fun happens. Return a new Budgie.Applet
            instance with the given UUID. The UUID is determined by the
            BudgiePanelManager, and is used for lifetime tracking.
        """
        return BudgieSensiboMonitorApplet(uuid)


class BudgieSensiboMonitorSettings(Gtk.Grid):
    def __init__(self, settings):
        super().__init__(row_spacing=6, column_spacing=6)
        self.set_margin_top(6)
        self.set_margin_bottom(6)
        self.set_margin_start(6)
        self.set_margin_end(6)

        self.settings = settings
        self.settings = Gio.Settings(schema="com.solus-project.budgie-sensibo-monitor")

        # API Key
        self.attach(Gtk.Label("API Key:", halign=Gtk.Align.END), 0, 0, 1, 1)
        api_entry = Gtk.Entry()
        api_entry.set_width_chars(30)
        api_entry.set_text(self.settings.get_string("apikey"))
        self.attach(api_entry, 1, 0, 1, 1)
        self.settings.bind("apikey", api_entry, "text", Gio.SettingsBindFlags.DEFAULT)

        # Device ID
        self.attach(Gtk.Label("Device ID:", halign=Gtk.Align.END), 0, 1, 1, 1)
        device_entry = Gtk.Entry()
        device_entry.set_width_chars(30)
        device_entry.set_text(self.settings.get_string("deviceid"))
        self.attach(device_entry, 1, 1, 1, 1)
        self.settings.bind("deviceid", device_entry, "text", Gio.SettingsBindFlags.DEFAULT)

        # Refresh Interval
        self.attach(Gtk.Label("Refresh Interval (minutes):", halign=Gtk.Align.END), 0, 2, 1, 1)
        interval_spin = Gtk.SpinButton.new_with_range(1, 120, 1)
        self.attach(interval_spin, 1, 2, 1, 1)
        self.settings.bind("intervals", interval_spin, "value", Gio.SettingsBindFlags.DEFAULT)

        self.show_all()



class BudgieSensiboMonitorApplet(Budgie.Applet):
    """ Budgie.Applet is in fact a Gtk.Bin """
    def __init__(self, uuid):

        Budgie.Applet.__init__(self)
        # Settings
        self.uuid = uuid
        self.settings = Gio.Settings(schema="com.solus-project.budgie-sensibo-monitor")

        # Set API key and device Id from settings
        self.apikey = self.settings.get_string('apikey')
        self.deviceid = self.settings.get_string('deviceid')
        self.refresh_interval = self.settings.get_int('intervals') * 60  # Convert minutes to seconds

        # Create a Sensibo Object with API key
        self.client = SensiboClientAPI(self.apikey)

        # Create Gtk image and set an "off" state icon
        self.icon = Gtk.Image()
        self.icon.set_from_icon_name("sensibo-monitor-icon", Gtk.IconSize.MENU)

        # Create a Grid to hold the components
        self.menugrid = Gtk.Grid()
        self.menugrid.set_row_spacing(5)
        self.menugrid.set_column_spacing(20)

        # left space
        self.menugrid.attach(Gtk.Label("   "), 0, 0, 1, 1)

        # Sensibo data
        self.statslabel = Gtk.Label('Temperature: --' + '\nHumidity: --', xalign=0)
        self.menugrid.attach(self.statslabel, 1, 1, 1, 1)

        # A switch to turn on & off your device ID
        self.switch = Gtk.Switch()
        self.switch.connect("notify::active", self.on_switch_activated)
        self.switch.set_active(False)
        self.menugrid.attach(self.switch, 1, 2, 1, 1)

        # end spacer
        spacer_end = Gtk.Label("")
        self.menugrid.attach(spacer_end, 3, 10, 1, 1)

        # Create the panel applet and popover
        self.box = Gtk.EventBox()
        self.box.add(self.icon)
        self.add(self.box)
        self.popover = Budgie.Popover.new(self.box)
        self.popover.add(self.menugrid)
        self.popover.get_child().show_all()
        self.box.show_all()
        self.show_all()
        self.box.connect("button-press-event", self.on_press)

        # Start the update thread
        self.update_thread = SensiboUpdateThread(self.statslabel, self.icon, self.switch, self.client, self.deviceid, self.refresh_interval)
        self.update_thread.start()

    def on_switch_activated(self, switch, gparam):
        # switch on off, set sensibo device on or off and upodate applet icon
        if switch.get_active():
            self.icon.set_from_icon_name("sensibo-monitor-icon-on", Gtk.IconSize.MENU)
            self.client.pod_change_ac_state(self.deviceid, self.update_thread.ac_state, "on", True)
        else:
            self.icon.set_from_icon_name("sensibo-monitor-icon", Gtk.IconSize.MENU)
            self.client.pod_change_ac_state(self.deviceid, self.update_thread.ac_state, "on", False)

    def on_press(self, box, arg):
        self.manager.show_popover(self.box)

    def do_update_popovers(self, manager):
        self.manager = manager
        self.manager.register_popover(self.box, self.popover)

    def do_get_settings_ui(self):
        """Return the applet settings with given uuid"""
        return BudgieSensiboMonitorSettings(self.get_applet_settings(self.uuid))

    def do_supports_settings(self):
        """Return True if support setting through Budgie Setting,
        False otherwise.
        """
        return True


class SensiboUpdateThread(threading.Thread):
    def __init__(self, statslabel, icon, switch, client, deviceid, refresh_interval):
        threading.Thread.__init__(self)
        self.statslabel = statslabel
        self.icon = icon
        self.switch = switch
        self.client = client
        self.deviceid = deviceid
        self.refresh_interval = refresh_interval
        self.ac_state = ''

    def run(self):
        while True:
            ac_now = self.getACNow()
            if ac_now:
                GLib.idle_add(self.update_stats, ac_now)
            else:
                GLib.idle_add(self.statslabel.set_text, "Failed to load AC data")

            self.ac_state = self.getACState()
            if self.ac_state:
                GLib.idle_add(self.update_state, self.ac_state)
            else:
                GLib.idle_add(self.statslabel.set_text, "Failed to load AC state")

            time.sleep(self.refresh_interval)

    def update_stats(self, ac_now):
        self.statslabel.set_text(f"Temperature: {ac_now[0]['temperature']}Â°\nHumidity: {ac_now[0]['humidity']}%")

    def update_state(self, ac_state):
        ac_onoff = ac_state['on']
        self.icon.set_from_icon_name("sensibo-monitor-icon-on" if ac_onoff else "sensibo-monitor-icon", Gtk.IconSize.MENU)
        self.switch.set_active(ac_onoff)

    def getACNow(self):
        try:
            return self.client.pod_measurement(self.deviceid)
        except Exception:
            return False

    def getACState(self):
        try:
            return self.client.pod_ac_state(self.deviceid)
        except Exception:
            return False
